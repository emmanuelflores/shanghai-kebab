////////////////////////////////
//WANNA BE VVVV?
///////////////////////////////
//don't forget that you can use the shader for the color of the boxes
#include "testApp.h"

GLfloat lightPos[] =  { -50.0f, 100.0f, 50.0f};

GLfloat lightPos0[] = { 140.0f, 250.0f, 140.0f};
GLfloat lightPos1[] = { -140.0f, 250.0f, 140.0f};
GLfloat lightPos2[] = { 0.0f, 250.0f, -200.0f};

GLfloat squashStretch[] = {1.0f, 1.0f, 1.0f};

//--------------------------------------------------------------
void testApp::setup(){
    //ofBackground(0, 0, 0);

    isBackgroundCleared = true;
    
    ofSetVerticalSync(true);
    
    ofBackground(255, 255, 255);
    ofDisableArbTex();
    //ofEnableAlphaBlending();
    ofSetFrameRate(30);
    ofEnableSmoothing();
    glEnable(GL_DEPTH_TEST);
    
    
    quadric = gluNewQuadric();
    gluQuadricTexture(quadric, GL_TRUE);
    gluQuadricNormals(quadric, GLU_SMOOTH);
    
    //image stuff
    redColor.loadImage("earth.jpg");
    
    shader.load("shaders/shader.vert", "shaders/shader.frag");
    
    counter = 0;
    blendValue = 0;
    
    
    for(unsigned int i = 0;i<totalBoxes;i++){
        float px = ofRandom((ofGetWidth()*0.5f)*-1.0f,ofGetWidth()*0.5f);
        float py = ofRandom((ofGetHeight()*0.5f)*-1.0f,ofGetHeight()*0.5f);
        float pz = ofRandom(-300,300);
        float si = ofRandom(10,100);
        
        posX.push_back(new float(px));
        posY.push_back(new float(py));
        posZ.push_back(new float(pz));
        sizes.push_back(new float(si));
    }
    
    
    mScale = ofVec3f(1.0f,1.0f,1.0f);
    
    
    
    //sound stuff
    sphere_resolution = 150;//like total boxes
    music.loadSound("Returner.mp3",false);
	music.play();
	music.setVolume(100);//25
	spectrum = new float[sphere_resolution];
	scaled_spectrum = new float[sphere_resolution];
	smoothed_spectrum = new float[sphere_resolution];
	smoothed_scaled_spectrum = new float[sphere_resolution];
	smoothed_total_volume = 0;//0
    
    for(int i = 0;i<sphere_resolution;i++){
		spectrum[i] = 0.0f;
		scaled_spectrum[i] = 0.0f;
		smoothed_scaled_spectrum[i] = 0.0f;
		smoothed_spectrum[i] = 0.0f;
	}
    
    ////////////////////////////////////////////////////
    //ribbon
    pTotal		= MAX_PARTICLES;
	trailIndex	= 0;
	
	stageWidth		= ofGetWidth();
	stageHeight		= ofGetHeight();
	stageCenterX	= stageWidth * 0.5;
	stageCenterY	= stageHeight * 0.5;
	
	posSpread = 600;
	velSpread = 2;
	
	for(int i=0; i<pTotal; i++)
	{
		pos[ i ][ 0 ] = ofRandom( -1, 1 ) * posSpread;
		pos[ i ][ 1 ] = ofRandom( -1, 1 ) * posSpread;
		pos[ i ][ 2 ] = ofRandom( -1, 1 ) * posSpread;
		
		vel[ i ][ 0 ] = ofRandom( -1, 1 ) * velSpread;
		vel[ i ][ 1 ] = ofRandom( -1, 1 ) * velSpread;
		vel[ i ][ 2 ] = ofRandom( -1, 1 ) * velSpread;
		
		col[ i ][ 0 ] = 1;
		col[ i ][ 1 ] = 1;
		col[ i ][ 2 ] = 1;
		col[ i ][ 3 ] = 1;
	}
	
	sphericalField.setCenter( 0, 0, 0 );
	sphericalField.setRadius( posSpread );
	
#ifdef USE_VBO
	
	initVBO();
	
#endif
	
    //	colourMapImage.loadImage( "colour_map_01.jpg" );
    //	colourMapImage.loadImage( "colour_map_02.jpg" );
	colourMapImage.loadImage( "bw_map.jpg" );
    
	upAxis.set( 0, 1, 0 );
	upAxisRot = 5;
	
	tileSaver.init( 10, 0, true );
	
	useAdditiveBlending = false;
    
    

    //////////////////////////////////////////////////
    //PARTICLES
    particleSystem.loadTexture("particleGrid2.png", 2, 2);
	particleSystem.init();
}

void testApp :: initVBO ()
{
#ifdef USE_VBO
	
	glGenBuffersARB( MAX_PARTICLES * 2, &vbo[ 0 ] );
	
	for(unsigned int i=0; i<MAX_PARTICLES; i++ )
	{
		glBindBufferARB( GL_ARRAY_BUFFER_ARB, vbo[ i * 2 + 0 ] );
		glBufferDataARB( GL_ARRAY_BUFFER_ARB, sizeof( tvr[ i ] ), tvr[ i ], GL_STREAM_DRAW_ARB );
		
		glBindBufferARB( GL_ARRAY_BUFFER_ARB, vbo[ i * 2 + 1 ] );
		glBufferDataARB( GL_ARRAY_BUFFER_ARB, sizeof( tcl[ i ] ), tcl[ i ], GL_STREAM_DRAW_ARB );
	}
	
#endif
}

//--------------------------------------------------------------
void testApp::update(){
    ////////////////////////////////////////////////////
    //get sound
	spectrum = ofSoundGetSpectrum(sphere_resolution);
	float scaled_total_volume = 0;
	float total_volume = 0;
	float spec_min = 100;
	float spec_max = 0;
	for(int i = 0; i < sphere_resolution; i++){
		spectrum[i] = spectrum[i] * sin((PI/2)/sphere_resolution * i);
		total_volume += spectrum[i];
		if(spectrum[i] < spec_min){
			spec_min = spectrum[i];
		}
		if(spectrum[i] > spec_max){
			spec_max = spectrum[i];
		}
	}
	
	for(int i = 0; i < sphere_resolution; i++){
		scaled_spectrum[i] = (spectrum[i] - spec_min) / (spec_max - spec_min);
		scaled_total_volume += scaled_spectrum[i];
		//smoothed_spectrum[i] = (0.75f*smoothed_spectrum[i]) + (0.25*spectrum[i]*2);
        smoothed_spectrum[i] = (0.05f*smoothed_spectrum[i]) + (0.1*spectrum[i]*2);
		smoothed_scaled_spectrum[i] = (0.75f*smoothed_scaled_spectrum[i]) + (0.25*scaled_spectrum[i]*2);
		smoothed_total_volume = (0.1f * smoothed_total_volume) + (0.9f * total_volume);
	}
    
    
    ////////////////////////////////////////////////////
    //CHECK THIS PROPORTIONS
    mScale.x = ofMap(smoothed_total_volume, 0.0,1.0,0.0,3.0);
    //the whole vector of scales
//    mScale.x = ofMap(smoothed_total_volume, 0.0,2.0,0.0,1.5);
//    mScale.y = ofMap(smoothed_total_volume, 0.0,2.0,0.0,1.5);
//    mScale.z = ofMap(smoothed_total_volume, 0.0,2.0,0.0,1.5);
    
    
    
    ////////////////////////////////////////////////////
    //ribbon
    if( tileSaver.bGoTiling )
		return;
	
	noiseField.update();
	
	for( int i=0; i<pTotal; i++ )
	{
		ofxVec3f vel;
		ofxVec3f sph = sphericalField.getNormalisedForce( pos[ i ][ 0 ], pos[ i ][ 1 ], pos[ i ][ 2 ] );
		ofxVec3f noi = noiseField.getNormalisedForce( pos[ i ][ 0 ], pos[ i ][ 1 ], pos[ i ][ 2 ] );
		
		sph *= 1.2;
		
		vel = sph + noi;
		vel.normalize();
		vel *= 3;
		
		pos[ i ][ 0 ] += vel.x;
		pos[ i ][ 1 ] += vel.y;
		pos[ i ][ 2 ] += vel.z;
        
		int j = 0;
		if( trailIndex < MAX_TRAIL_LENGTH )
		{
			j = trailIndex;
		}
		else
		{
			j = MAX_TRAIL_LENGTH - 1;
		}
		
		// TRAIL POSITIONS.
		if( trailIndex > 0 )
		{
			memmove( trl[ i ] + 3, trl[ i ], 3 * j * sizeof(float) );
		}
        
		trl[ i ][ 0 ] = pos[ i ][ 0 ];
		trl[ i ][ 1 ] = pos[ i ][ 1 ];
		trl[ i ][ 2 ] = pos[ i ][ 2 ];
        
		// TRAIL VERTEX.
		if( trailIndex > 0 )
		{
			memmove( tvr[ i ] + 6, tvr[ i ], 6 * j * sizeof(float) );
		}
        
		if( trailIndex == 0 )
		{
			tvr[ i ][ 0 ] = pos[ i ][ 0 ];
			tvr[ i ][ 1 ] = pos[ i ][ 1 ];
			tvr[ i ][ 2 ] = pos[ i ][ 2 ];
			tvr[ i ][ 3 ] = pos[ i ][ 0 ];
			tvr[ i ][ 4 ] = pos[ i ][ 1 ];
			tvr[ i ][ 5 ] = pos[ i ][ 2 ];
		}
		else
		{
			int m = 0;
			int n = 1;
			
			float t0x = trl[ i ][ m * 3 + 0 ];	// xyz position of 1st trail point.
			float t0y = trl[ i ][ m * 3 + 1 ];
			float t0z = trl[ i ][ m * 3 + 2 ];
			
			float t1x = trl[ i ][ n * 3 + 0 ];	// xyz position of 2nd trail point.
			float t1y = trl[ i ][ n * 3 + 1 ];
			float t1z = trl[ i ][ n * 3 + 2 ];
			
			ofxVec3f t0 = ofxVec3f( t0x, t0y, t0z );	// position vector of 1st trail point.
			ofxVec3f t1 = ofxVec3f( t1x, t1y, t1z );	// position vector of 2nd trail point.
			
			ofxVec3f v1 = t0 - t1;
			v1.normalize();
			ofxVec3f ya = ofxVec3f( upAxis );
			ofxVec3f v2 = ya.cross( v1 );
			ofxVec3f v3 = v1.cross( v2 ).normalize();
			
			float w		= 2;
			float xOff	= v3.x * w;
			float yOff	= v3.y * w;
			float zOff	= v3.z * w;
			
			tvr[ i ][ 0 ] = t0x - xOff;
			tvr[ i ][ 1 ] = t0y - yOff;
			tvr[ i ][ 2 ] = t0z - zOff;
			tvr[ i ][ 3 ] = t0x + xOff;
			tvr[ i ][ 4 ] = t0y + yOff;
			tvr[ i ][ 5 ] = t0z + zOff;
		}
		
		// TRAIL COLOUR.
		int r, g, b;
		mapColour( pos[ i ][ 0 ], pos[ i ][ 1 ], &r, &g, &b );
        
		if( trailIndex > 0 )
		{
			memmove( tcl[ i ] + 4 * 2, tcl[ i ], 4 * 2 * j * sizeof(float) );
		}
        
        //		tcl[ i ][ 0 ] = tcl[ i ][ 4 ] = r / 255.0f;
        //		tcl[ i ][ 1 ] = tcl[ i ][ 5 ] = g / 255.0f;
        //		tcl[ i ][ 2 ] = tcl[ i ][ 6 ] = b / 255.0f;
        //		tcl[ i ][ 3 ] = tcl[ i ][ 7 ] = 0.7f;
        tcl[ i ][ 0 ] = tcl[ i ][ 4 ] = 0;
		tcl[ i ][ 1 ] = tcl[ i ][ 5 ] = 0;
		tcl[ i ][ 2 ] = tcl[ i ][ 6 ] = 0;
		tcl[ i ][ 3 ] = tcl[ i ][ 7 ] = 0.7f;
	}
	
	if( trailIndex < MAX_TRAIL_LENGTH )
	{
		++trailIndex;
	}
	
	upAxis.rotate( upAxisRot, ofxVec3f( 1, 0, 0 ) );
	
	rotateY += 0.1;
    
    
    ////////////////////////////////////////////
    particleSystem.update();
}

void testApp :: mapColour ( float x, float y, int *r, int *g, int *b )
{
	float cx, cy;
	
	cx = ( x + posSpread * 0.5 ) / posSpread;
	cy = ( y + posSpread * 0.5 ) / posSpread;
	
	cx = MAX( MIN( cx, 1 ), 0 );
	cy = MAX( MIN( cy, 1 ), 0 );
	
	unsigned char *pixels = colourMapImage.getPixels();
	
	int w = (int)( colourMapImage.width * cx ) * 3;
	int h = (int)( colourMapImage.height * cy );
	int i = h * colourMapImage.width * 3 + w;
	
	*r = pixels[ i + 0 ];
	*g = pixels[ i + 1 ];
	*b = pixels[ i + 2 ];
}

//--------------------------------------------------------------
void testApp::draw(){
    ofSetBackgroundAuto(isBackgroundCleared);

    cam.begin();
    
    
    ofRotateY(360*sinf(float(ofGetFrameNum())/500.0f));
    ofRotate(-90, 1, 0, 0);
    
    ////////////////////////////////////////////////////
    //ribbon

	
    	glPushMatrix();
        //glTranslatef( stageCenterX, stageCenterY, 0 );
        ofScale(2, 2,2);
    	//glRotatef( rotateY, 0, 1, 0 );
	
	
	drawTrailFillVBO();
	

	
	
	glPopMatrix();
	
    
    //ofTranslate(ofGetWidth()*0.5f, ofGetHeight()*0.5f);
    //ofScale(mScale.x, mScale.y,mScale.z);
    //glScalef(mScale.x, mScale.y,mScale.z);
//    ofRotateY(360*sinf(float(ofGetFrameNum())/500.0f));
//    ofRotate(-90, 1, 0, 0);
    //ofScale(mScale.x, mScale.y,mScale.z);
    //gluSphere(quadric, 150, 400, 400);
    
    //ofBox(0, 0, 0, 400);
    for(unsigned int i = 0;i<totalBoxes;i++){
        //color
        int randomIndex = (int)ofRandom(10);
        pickedColors.push_back(palette[randomIndex]);
        ofFill();
        //ofSetColor(120,120,255);
        ofSetColor( pickedColors[i]);
        ofBox(*posX[i], *posY[i], *posZ[i], *sizes[i]);
        ofNoFill();
        ofSetColor(0, 0, 0);
        ofBox(*posX[i], *posY[i], *posZ[i], *sizes[i]);
        
        
    }
    
    
    //glLoadIdentity();
    //ofLoadIdentityMatrix();
    float norm = 1 / ofGetHeight();
    glScalef(norm, norm, norm);
    ofRotateY(360*sinf(float(ofGetFrameNum())/500.0f));
    ofRotate(-90, 1, 0, 0);
    ofScale(mScale.x, mScale.y,mScale.z);
    //gluSphere(quadric, 150, 400, 400);
    
    //ofBox(0, 0, 0, 400);
    for(unsigned int i = 0;i<totalBoxes;i++){
        ofFill();
        ofSetColor(120,255,255);
        ofBox(*posX[i], *posY[i], *posZ[i], *sizes[i]);
        ofNoFill();
        ofSetColor(120, 120, 120);
        ofBox(*posX[i], *posY[i], *posZ[i], *sizes[i]);
        
    }

    
    
    
    cam.end();

}

//--------------------------------------------------------------
void testApp::keyPressed(int key){
    if(key == 'b' || key == 'B'){//background
        isBackgroundCleared = false;
    }
    else if(key == 'c' || key == 'C'){//clear
        isBackgroundCleared = true;
        ofBackground(255, 255, 255);
    }
    else if(key == 'x' || key == 'X'){//clear
        //isBackgroundCleared = true;
        ofSetBackgroundAuto(false);
        ofBackground(255, 255, 255);
    }
    
    if(key == 'f') ofToggleFullscreen();
}

//--------------------------------------------------------------
void testApp::keyReleased(int key){
    if( key == 'a' )
	{
		useAdditiveBlending = !useAdditiveBlending;
		
		if( useAdditiveBlending )
		{
			glDisable( GL_DEPTH_TEST );
			glBlendFunc( GL_SRC_ALPHA, GL_ONE );
		}
		else
		{
			glEnable( GL_DEPTH_TEST );
			glBlendFunc( GL_ONE, GL_ZERO );
		}
	}
    
}

//--------------------------------------------------------------
void testApp::mouseMoved(int x, int y){
    //cout<<"this is the x "<<x<<endl;
    //cout<<"this is the y "<<y<<endl;
    mMouse.x = x;
    mMouse.y = y;
    
    //test scale
    //mScale.x = ofMap(x, 0, ofGetWidth(), 0.0f, 2.0f);
}

//--------------------------------------------------------------
void testApp::mouseDragged(int x, int y, int button){
    
}

//--------------------------------------------------------------
void testApp::mousePressed(int x, int y, int button){
    
}

//--------------------------------------------------------------
void testApp::mouseReleased(int x, int y, int button){
    
}

//--------------------------------------------------------------
void testApp::windowResized(int w, int h){
    
}

//--------------------------------------------------------------
void testApp::gotMessage(ofMessage msg){
    
}

//--------------------------------------------------------------
void testApp::dragEvent(ofDragInfo dragInfo){
    
}


void testApp :: drawPoint()
{
	for( int i=0; i<pTotal; i++ )
	{
		glPushMatrix();
		glTranslatef( pos[ i ][ 0 ], pos[ i ][ 1 ], pos[ i ][ 2 ] );
		ofCircle( 0, 0, 4 );
		glPopMatrix();
	}
}


//convert this into vertex arrays
void testApp :: drawTrailFill()
{
    //	for( int i=0; i<pTotal; i++ )
    //	{
    //		//glBegin( GL_QUAD_STRIP );
    //        glBegin(GL_POINTS);
    //
    //		for( int j=0; j<trailIndex; j++ )
    //		{
    //			float r = tcl[ i ][ j * 4 * 2 + 0 ];
    //			float g = tcl[ i ][ j * 4 * 2 + 1 ];
    //			float b = tcl[ i ][ j * 4 * 2 + 2 ];
    //			float a = tcl[ i ][ j * 4 * 2 + 3 ];
    //
    //			//glColor4f( r, g, b, a );
    //            glColor4f(1, 1, 1, 1);
    //
    //			float v0x = tvr[ i ][ j * 3 * 2 + 0 ];
    //			float v0y = tvr[ i ][ j * 3 * 2 + 1 ];
    //			float v0z = tvr[ i ][ j * 3 * 2 + 2 ];
    //			float v1x = tvr[ i ][ j * 3 * 2 + 3 ];
    //			float v1y = tvr[ i ][ j * 3 * 2 + 4 ];
    //			float v1z = tvr[ i ][ j * 3 * 2 + 5 ];
    //
    //			glVertex3f( v0x, v0y, v0z );
    //			glVertex3f( v1x, v1y, v1z );
    //		}
    //
    //		glEnd();
    //	}
}

void testApp :: drawTrailOutline()
{
    //	glHint( GL_LINE_SMOOTH_HINT, GL_NICEST );
    //	glEnable( GL_LINE_SMOOTH );
    //
    //	for(unsigned int i=0; i<pTotal; i++ )
    //	{
    //		glBegin( GL_POINTS );
    //
    //		for( int j=0; j<trailIndex; j++ )
    //		{
    //			int r = tcl[ i ][ j * 4 + 0 ];
    //			int g = tcl[ i ][ j * 4 + 1 ];
    //			int b = tcl[ i ][ j * 4 + 2 ];
    //			int a = tcl[ i ][ j * 4 + 3 ];
    //
    //			ofSetColor( r, g, b, a );
    //            ofSetColor(255, 255, 255);
    //
    //			float v0x = tvr[ i ][ j * 6 + 0 ];
    //			float v0y = tvr[ i ][ j * 6 + 1 ];
    //			float v0z = tvr[ i ][ j * 6 + 2 ];
    //			float v1x = tvr[ i ][ j * 6 + 3 ];
    //			float v1y = tvr[ i ][ j * 6 + 4 ];
    //			float v1z = tvr[ i ][ j * 6 + 5 ];
    //
    //			glVertex3f( v0x, v0y, v0z );
    //			glVertex3f( v1x, v1y, v1z );
    //		}
    //
    //		glEnd();
    //	}
}


//vertex arrays
void testApp :: drawTrailFillVBO()
{
    /*
     #ifdef USE_VBO
     
     glGenBuffersARB( MAX_PARTICLES * 2, &vbo[ 0 ] );
     
     for(unsigned int i=0; i<MAX_PARTICLES; i++ )
     {
     glBindBufferARB( GL_ARRAY_BUFFER_ARB, vbo[ i * 2 + 0 ] );
     glBufferDataARB( GL_ARRAY_BUFFER_ARB, sizeof( tvr[ i ] ), tvr[ i ], GL_STREAM_DRAW_ARB );
     
     glBindBufferARB( GL_ARRAY_BUFFER_ARB, vbo[ i * 2 + 1 ] );
     glBufferDataARB( GL_ARRAY_BUFFER_ARB, sizeof( tcl[ i ] ), tcl[ i ], GL_STREAM_DRAW_ARB );
     }
     
     #endif
     */
#ifdef USE_VBO
	
	for(unsigned int i=0; i<MAX_PARTICLES; i++ )
	{
		glEnableClientState( GL_VERTEX_ARRAY );
		glEnableClientState( GL_COLOR_ARRAY );
		
		glBindBufferARB( GL_ARRAY_BUFFER_ARB, vbo[ i * 2 + 0 ] );
		glBufferSubDataARB( GL_ARRAY_BUFFER_ARB, 0, sizeof( tvr[ i ] ), tvr[ i ] );
		glVertexPointer( 3, GL_FLOAT, 0, 0 );
		
		glBindBufferARB( GL_ARRAY_BUFFER_ARB, vbo[ i * 2 + 1 ] );
		glBufferSubDataARB( GL_ARRAY_BUFFER_ARB, 0, sizeof( tcl[ i ] ), tcl[ i ] );
		glColorPointer( 4, GL_FLOAT, 0, 0 );
		
		glDrawArrays( GL_QUAD_STRIP, 0, MAX_TRAIL_LENGTH );
		
		glDisableClientState( GL_VERTEX_ARRAY );
		glDisableClientState( GL_COLOR_ARRAY );
		
		glBindBufferARB( GL_ARRAY_BUFFER_ARB, 0 );
	}
	
#endif
}